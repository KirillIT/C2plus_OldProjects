#include <iostream> //библиотека для ввода и вывода данных в консоль

#include <Windows.h> //библиотека для подлючения русского языка (В данном случае)

using namespace std;//эта строка позволяет писать так - "cout « ..." вместо "std::cout « ..."

bool verifyTheMultiplicity(int n) { //функция bool, проверяет число на делимость, в данном случае на кратность 11-ти. true - если число кратно 11. false - нет

	const int SIZE = 10; //размер массива, почему 10? Да потому что для int максимальное значение < 3000000000, но > 1000000000. То есть цифр в числе гарантированно меньше или равно 10
	
	int * arr = new int[SIZE]{}; //создадим массив, в который запишем число n "посимвольно". Например число 453 в массиве будет записано так с помощью алгоритма ниже. arr[0] = 3,arr[1] = 5,arr[2] = 4. Остаток массива будет заполнен нулями, благодаря записи: "{}"

	int i = 0; //счётчик, нужен, чтобы переходить к след. элементу массива, см. цикл ниже

	while (n > 0) {//тут мы записывает все цифры числа в массив, но учтём, что числа записываюся в массив зеркально. Смотри пример на строке 11

		arr[i] = n % 10; //берём остаток от 10 (то есть записываем крайнюю правую цифру числа. от числа 453 - запишем 3-ку

		n /= 10;//уменьшаем число деление на 10. Так как мы все действия производим с int, то остаток отбрасывается. Фактически мы избавляемся от правой цифры в числе. Даже если число n = 99, то тут n / 10 = 9. Именно так нам и нужно
		
		i++;//переходим к след. элементу массива

	}

	int sumOfEven = 0; //сюда будем складывать все чётные элементы числа

	int sumOfOdd = 0; //а сюда - нечётные

	for (i = 0; i < SIZE; i++) {//теперь нужно пройтись по массиву и записать сумму всех чётных элементов и нечётных

		if (i % 2 == 0) { //если индекс массива чётный, то прибаляем элемент arr[i] в сумму нечётных элементов, т.к. мы записали массив зеркально. См. строку 15 и 11

			sumOfOdd += arr[i];//прибавляем наш элемент к сумме нечётных
			
		}

		else {//тут наоборот

			sumOfEven += arr[i];//прибавляем наш элементк к сумме чётных

		}
	}

	delete[] arr;//удаление динам. массива

	if ((sumOfOdd - sumOfEven) % 11 == 0) {//если разность суммы нечётных элементов и чётных кратна 11-ти, то и число кратно 11-ти. См. условие задачи

		return true;//возвращаем true

	}

	return false;//возвращаем false (по умолчанию)

}

void process(int m) {//алгоритм выполнения задачи. Функция

	for (int i = 11; i <= m; i++) {//идём проверять все числа от 11 до m

		if (verifyTheMultiplicity(i) == true) { //если число кратно 11. То есть мы вызываем функцию, которая проверяет число на кратность 11-ти. true - если число кратно 11. false - нет

			cout << i << " ";//и если мы нашли такое число, то выводим его

		}
	}
}

int main() {//отсюда старт программы

	SetConsoleCP(1251);//подключение русского языка

	SetConsoleOutputCP(1251);//подключение русского языка

	int m;//создадим число m (верхняя граница) из условия

	cout << "Введите верхнюю границу (от 0 до m), где найти все числа, кратные 11-ти: ";

	HANDLE hOUTPUT = GetStdHandle(STD_OUTPUT_HANDLE); //создание объекта, чтобы изменить цвет текущей консоли

	SetConsoleTextAttribute(hOUTPUT, FOREGROUND_RED); //делаем красный цвет

	cin >> m;//вводим число m

	SetConsoleTextAttribute(hOUTPUT, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE); //возвращаем белый цвет
	
	if (m <= 10) {//сразу исключим числа меньше 11, завершив корректно программу

		cout << "Чисел, кратных 11-ти, в таком диапозоне не существует" << endl;

		return 0;//это и есть завершение

	}

	//SetConsoleTextAttribute(hOUTPUT, FOREGROUND_RED | FOREGROUND_INTENSITY);

	cout << "Числа, кратные 11-ти: ";

	SetConsoleTextAttribute(hOUTPUT, FOREGROUND_GREEN);//делаем зелёный цвет

	process(m); //вызываем основную функцию

	cout << endl;

	SetConsoleTextAttribute(hOUTPUT, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE); //возвращаем белый цвет

}